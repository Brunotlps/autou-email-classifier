#!/bin/bash

echo "üöÄ DEPLOY PRODU√á√ÉO - AUTOU EMAIL CLASSIFIER"

# Cores
GREEN='\033[0;32m'
BLUE='\033[0;34m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m'

print_status() { echo -e "${BLUE}[INFO]${NC} $1"; }
print_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
print_error() { echo -e "${RED}[ERROR]${NC} $1"; }
print_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }

# Verificar se .env existe
if [ ! -f ".env" ]; then
    print_warning "Criando arquivo .env..."
    cat > .env << 'ENVEOF'
SECRET_KEY=django-insecure-change-this-in-production-$(openssl rand -hex 32)
DB_PASSWORD=secure_db_password_$(openssl rand -hex 16)
REDIS_PASSWORD=secure_redis_password_$(openssl rand -hex 16)
ENVEOF
    print_success "‚úÖ Arquivo .env criado. EDITE AS SENHAS!"
fi

# Carregar vari√°veis
set -a
source .env
set +a

# Verificar Docker
if ! docker info >/dev/null 2>&1; then
    print_error "Docker n√£o est√° rodando"
    exit 1
fi

# Parar containers existentes
print_status "Parando containers existentes..."
docker compose -f docker-compose.production.yml down

# Build das imagens
print_status "Construindo imagens de produ√ß√£o..."
docker compose -f docker-compose.production.yml build --no-cache

# Iniciar banco e Redis primeiro
print_status "Iniciando banco de dados e Redis..."
docker compose -f docker-compose.production.yml up -d db redis

# Aguardar banco ficar pronto
print_status "Aguardando banco de dados..."
sleep 20

# Executar migra√ß√µes
print_status "Executando migra√ß√µes..."
docker compose -f docker-compose.production.yml run --rm web python manage.py migrate

# Coletar est√°ticos
print_status "Coletando arquivos est√°ticos..."
docker compose -f docker-compose.production.yml run --rm web python manage.py collectstatic --noinput

# Criar superuser se n√£o existir
print_status "Verificando superuser..."
docker compose -f docker-compose.production.yml run --rm web python manage.py shell << 'PYEOF'
from django.contrib.auth import get_user_model
User = get_user_model()
if not User.objects.filter(username='admin').exists():
    User.objects.create_superuser('admin', 'admin@autou.com', 'admin123')
    print('‚úÖ Superuser criado: admin/admin123')
else:
    print('‚úÖ Superuser j√° existe')
PYEOF

# Iniciar todos os servi√ßos
print_status "Iniciando todos os servi√ßos..."
docker compose -f docker-compose.production.yml up -d

# Aguardar inicializa√ß√£o
print_status "Aguardando inicializa√ß√£o completa..."
sleep 30

# Verificar sa√∫de dos servi√ßos
print_status "Verificando sa√∫de dos servi√ßos..."
docker compose -f docker-compose.production.yml ps

# Testar aplica√ß√£o
print_status "Testando aplica√ß√£o..."
for i in {1..10}; do
    if curl -f http://localhost/ >/dev/null 2>&1; then
        print_success "‚úÖ APLICA√á√ÉO FUNCIONANDO!"
        break
    else
        if [ $i -eq 10 ]; then
            print_error "‚ùå Aplica√ß√£o n√£o respondeu"
            docker compose -f docker-compose.production.yml logs web
            exit 1
        fi
        print_warning "Tentativa $i/10..."
        sleep 5
    fi
done

echo ""
print_success "üéâ DEPLOY DE PRODU√á√ÉO CONCLU√çDO!"
echo ""
print_success "üåê APLICA√á√ÉO DISPON√çVEL:"
echo "   üè† Frontend: http://localhost/"
echo "   üîß Admin:    http://localhost/admin/ (admin/admin123)"
echo "   üìñ API:      http://localhost/api/docs/"
echo ""
print_success "üìä MONITORAMENTO:"
echo "   docker compose -f docker-compose.production.yml logs -f web"
echo "   docker compose -f docker-compose.production.yml ps"
echo "   docker compose -f docker-compose.production.yml exec web python manage.py shell"
echo ""
print_warning "‚ö†Ô∏è LEMBRE-SE:"
echo "   - Editar senhas no arquivo .env"
echo "   - Configurar dom√≠nio em ALLOWED_HOSTS"
echo "   - Configurar SSL/HTTPS para produ√ß√£o"
